{
	"activationEvents": [
		"workspaceContains:**/gradlew",
		"workspaceContains:**/gradlew.bat",
		"workspaceContains:build.gradle",
		"workspaceContains:*/build.gradle",
		"workspaceContains:settings.gradle",
		"workspaceContains:*/settings.gradle",
		"workspaceContains:build.gradle.kts",
		"workspaceContains:*/build.gradle.kts",
		"workspaceContains:settings.gradle.kts",
		"workspaceContains:*/settings.gradle.kts",
		"onCommand:_gradle.onWillImporterConnect"
	],
	"aiKey": "b4aae7d0-c65b-4819-92bf-1d2f537ae7ce",
	"contributes": {
		"commands": [
			{
				"command": "gradle.runTask",
				"icon": {
					"dark": "resources/dark/run.svg",
					"light": "resources/light/run.svg"
				},
				"title": "Run Task"
			},
			{
				"category": "Gradle",
				"command": "gradle.runBuild",
				"icon": {
					"dark": "resources/dark/console.svg",
					"light": "resources/light/console.svg"
				},
				"title": "Run a Gradle Build"
			},
			{
				"command": "gradle.pinTask",
				"title": "Pin Task"
			},
			{
				"command": "gradle.pinTaskWithArgs",
				"title": "Pin Task With Args"
			},
			{
				"command": "gradle.unpinTask",
				"title": "Unpin Task"
			},
			{
				"command": "gradle.debugTask",
				"icon": {
					"dark": "resources/dark/debug-and-run.svg",
					"light": "resources/light/debug-and-run.svg"
				},
				"title": "Debug Task"
			},
			{
				"command": "gradle.restartTask",
				"icon": {
					"dark": "resources/dark/refresh.svg",
					"light": "resources/light/refresh.svg"
				},
				"title": "Restart Task"
			},
			{
				"command": "gradle.showTaskTerminal",
				"icon": {
					"dark": "resources/dark/console.svg",
					"light": "resources/light/console.svg"
				},
				"title": "Show Terminal"
			},
			{
				"command": "gradle.closeTaskTerminals",
				"icon": {
					"dark": "resources/dark/close-all.svg",
					"light": "resources/light/close-all.svg"
				},
				"title": "Close Terminal/s"
			},
			{
				"command": "gradle.closeAllTaskTerminals",
				"icon": {
					"dark": "resources/dark/close-all.svg",
					"light": "resources/light/close-all.svg"
				},
				"title": "Close All Terminals"
			},
			{
				"command": "gradle.clearAllRecentTasks",
				"icon": {
					"dark": "resources/dark/clear-all.svg",
					"light": "resources/light/clear-all.svg"
				},
				"title": "Clear Recent Tasks"
			},
			{
				"command": "gradle.unpinAllTasks",
				"icon": {
					"dark": "resources/dark/clear-all.svg",
					"light": "resources/light/clear-all.svg"
				},
				"title": "Unpin all Tasks"
			},
			{
				"command": "gradle.removeRecentTask",
				"title": "Remove Recent Task"
			},
			{
				"command": "gradle.showLogs",
				"title": "Show logs"
			},
			{
				"command": "gradle.showTasks",
				"title": "Show Gradle Tasks"
			},
			{
				"command": "gradle.runTaskWithArgs",
				"title": "Run Task With Args"
			},
			{
				"command": "gradle.debugTaskWithArgs",
				"title": "Debug Task With Args"
			},
			{
				"command": "gradle.openBuildFile",
				"title": "Open Build File"
			},
			{
				"command": "gradle.cancelBuild",
				"title": "Cancel Task"
			},
			{
				"command": "gradle.stopDaemon",
				"icon": {
					"dark": "resources/dark/stop.svg",
					"light": "resources/light/stop.svg"
				},
				"title": "Stop Daemon"
			},
			{
				"command": "gradle.cancelTreeItemTask",
				"icon": {
					"dark": "resources/dark/stop.svg",
					"light": "resources/light/stop.svg"
				},
				"title": "Cancel Task"
			},
			{
				"command": "gradle.explorerFlat",
				"icon": {
					"dark": "resources/dark/list-flat.svg",
					"light": "resources/light/list-flat.svg"
				},
				"title": "Show Flat Tasks"
			},
			{
				"command": "gradle.explorerTree",
				"icon": {
					"dark": "resources/dark/list-tree.svg",
					"light": "resources/light/list-tree.svg"
				},
				"title": "Show Hierarchical Tasks"
			},
			{
				"command": "gradle.showProcessMessage",
				"title": "Show Gradle process information message box"
			},
			{
				"category": "Gradle",
				"command": "gradle.refresh",
				"icon": {
					"dark": "resources/dark/refresh.svg",
					"light": "resources/light/refresh.svg"
				},
				"title": "Refresh Gradle Projects View"
			},
			{
				"command": "gradle.refreshDaemonStatus",
				"icon": {
					"dark": "resources/dark/refresh.svg",
					"light": "resources/light/refresh.svg"
				},
				"title": "Refresh Daemon Status"
			},
			{
				"command": "gradle.stopDaemons",
				"enablement": "gradle:hasValidDaemons",
				"icon": {
					"dark": "resources/dark/stop-daemons.svg",
					"light": "resources/light/stop-daemons.svg"
				},
				"title": "Stop Daemons"
			},
			{
				"command": "gradle.openSettings",
				"icon": {
					"dark": "resources/dark/gear.svg",
					"light": "resources/light/gear.svg"
				},
				"title": "Open Settings"
			},
			{
				"category": "Gradle",
				"command": "gradle.findTask",
				"title": "Find Gradle Task"
			},
			{
				"command": "gradle.cancellingTreeItemTask",
				"icon": {
					"dark": "resources/dark/loading.svg",
					"light": "resources/light/loading.svg"
				},
				"title": "Cancelling Task"
			},
			{
				"command": "gradle.dependency.reveal",
				"icon": "$(references)",
				"title": "Go to Dependency"
			},
			{
				"command": "gradle.showStoppedDaemons",
				"title": "Show Stopped Daemons"
			},
			{
				"command": "gradle.hideStoppedDaemons",
				"title": "Hide Stopped Daemons"
			},
			{
				"category": "Gradle",
				"command": "gradle.createProject",
				"title": "Create a Gradle Java Project..."
			},
			{
				"category": "Gradle",
				"command": "gradle.createProjectAdvanced",
				"title": "Create a Gradle Java Project... (Advanced)"
			},
			{
				"category": "Gradle",
				"command": "gradle.runTasks",
				"title": "Run Gradle Tasks..."
			},
			{
				"category": "Gradle",
				"command": "gradle.java.projectConfiguration.update",
				"icon": "$(sync)",
				"title": "Reload All Gradle Projects"
			}
		],
		"configuration": {
			"id": "gradle",
			"properties": {
				"gradle.allowParallelRun": {
					"default": false,
					"markdownDescription": "Allow to run tasks in parallel, each running will create a new terminal. This configuration will override `gradle.reuseTerminals` and always create new task terminals when running or debugging a task.",
					"scope": "window",
					"type": "boolean"
				},
				"gradle.autoDetect": {
					"default": "on",
					"description": "Controls whether Gradle tasks should be automatically detected",
					"enum": [
						"off",
						"on"
					],
					"scope": "resource",
					"type": "string"
				},
				"gradle.debug": {
					"default": false,
					"description": "Show extra debug information in the output panel",
					"scope": "window",
					"type": "boolean"
				},
				"gradle.disableConfirmations": {
					"default": false,
					"description": "Disable the warning confirm messages when performing batch actions",
					"scope": "window",
					"type": "boolean"
				},
				"gradle.focusTaskInExplorer": {
					"default": true,
					"description": "Focus the task in the explorer when running a task",
					"scope": "window",
					"type": "boolean"
				},
				"gradle.javaDebug": {
					"default": {
						"tasks": [
							"run",
							"runBoot",
							"test",
							"intTest",
							"integration"
						]
					},
					"deprecationMessage": "This setting will be removed in the future since the extension can automatically get debug tasks, for clean options, please see `gradle.javaDebug.cleanOutput`.",
					"description": "Java debug options",
					"properties": {
						"clean": {
							"default": true,
							"description": "Clean the task output cache before debugging",
							"type": "boolean"
						},
						"tasks": {
							"default": [
								"run",
								"runBoot",
								"test",
								"intTest",
								"integration"
							],
							"description": "List of JavaExec tasks to debug",
							"type": "array"
						}
					},
					"required": [
						"tasks"
					],
					"scope": "resource",
					"type": "object"
				},
				"gradle.javaDebug.cleanOutput": {
					"default": true,
					"description": "Clean the task output cache before debugging",
					"scope": "window",
					"type": "boolean"
				},
				"gradle.nestedProjects": {
					"anyOf": [
						{
							"default": false,
							"description": "Discover all nested projects",
							"type": "boolean"
						},
						{
							"default": [],
							"description": "Discover specific nested projects (by directory name)",
							"type": "array"
						}
					],
					"default": false,
					"description": "Discover Gradle projects in nested sub-directories",
					"scope": "window"
				},
				"gradle.projectOpenBehaviour": {
					"default": "Interactive",
					"description": "Default method of opening newly created project.",
					"enum": [
						"Interactive",
						"Open",
						"Add to Workspace"
					],
					"scope": "window",
					"type": "string"
				},
				"gradle.reuseTerminals": {
					"default": "task",
					"enum": [
						"task",
						"off",
						"all"
					],
					"enumDescriptions": [
						"Use a dedicated terminal for a specific task. The terminal is not shared with other tasks.",
						"Create a new terminal when a task is executed.",
						"Share the terminal with other tasks."
					],
					"markdownDescription": "Reuse task terminals behaviour, will be overridden to `off` if `gradle.allowParallelRun` is true.",
					"scope": "window"
				},
				"gradle.showStoppedDaemons": {
					"default": false,
					"description": "Show stopped daemons in the Gradle Daemons view",
					"scope": "application",
					"type": "boolean"
				},
				"java.gradle.buildServer.enabled": {
					"default": "on",
					"enum": [
						"on",
						"off"
					],
					"markdownDescription": "Whether to use build server to synchronize Gradle project. It will replace the original Buildship to import the Gradle when enabled.",
					"type": "string"
				},
				"java.gradle.buildServer.openBuildOutput": {
					"default": "openOnBuildFailure",
					"description": "Controls when the build output should open.",
					"enum": [
						"neverOpen",
						"openOnBuildStart",
						"openOnBuildFailure"
					],
					"enumDescriptions": [
						"Never automatically open build output.",
						"Open the build output when the build starts.",
						"Open the build output when the build fails."
					],
					"type": "string"
				}
			},
			"title": "Gradle",
			"type": "object"
		},
		"grammars": [
			{
				"language": "gradle",
				"path": "./syntaxes/groovy.tmLanguage.json",
				"scopeName": "source.groovy"
			},
			{
				"language": "gradle-build",
				"path": "./syntaxes/GradleBuild.tmLanguage.json",
				"scopeName": "source.gradle-build"
			}
		],
		"javaExtensions": [
			"./server/com.microsoft.gradle.bs.importer-0.5.3.jar"
		],
		"jsonValidation": [
			{
				"fileMatch": "package.json",
				"url": "https://schemastore.azurewebsites.net/schemas/json/package.json"
			}
		],
		"languages": [
			{
				"aliases": [
					"Gradle"
				],
				"configuration": "./gradle-language-configuration.json",
				"extensions": [
					".gradle"
				],
				"id": "gradle"
			},
			{
				"id": "gradle-build"
			}
		],
		"menus": {
			"commandPalette": [
				{
					"command": "gradle.showTasks",
					"when": "false"
				},
				{
					"command": "gradle.runTask",
					"when": "false"
				},
				{
					"command": "gradle.showLogs",
					"when": "false"
				},
				{
					"command": "gradle.debugTask",
					"when": "false"
				},
				{
					"command": "gradle.restartTask",
					"when": "false"
				},
				{
					"command": "gradle.showTaskTerminal",
					"when": "false"
				},
				{
					"command": "gradle.closeTaskTerminals",
					"when": "false"
				},
				{
					"command": "gradle.closeAllTaskTerminals",
					"when": "false"
				},
				{
					"command": "gradle.clearAllRecentTasks",
					"when": "false"
				},
				{
					"command": "gradle.unpinAllTasks",
					"when": "false"
				},
				{
					"command": "gradle.refreshDaemonStatus",
					"when": "false"
				},
				{
					"command": "gradle.stopDaemons",
					"when": "false"
				},
				{
					"command": "gradle.openBuildFile",
					"when": "false"
				},
				{
					"command": "gradle.runTaskWithArgs",
					"when": "false"
				},
				{
					"command": "gradle.debugTaskWithArgs",
					"when": "false"
				},
				{
					"command": "gradle.cancelBuild",
					"when": "false"
				},
				{
					"command": "gradle.stopDaemon",
					"when": "false"
				},
				{
					"command": "gradle.cancelTreeItemTask",
					"when": "false"
				},
				{
					"command": "gradle.explorerFlat",
					"when": "false"
				},
				{
					"command": "gradle.explorerTree",
					"when": "false"
				},
				{
					"command": "gradle.showProcessMessage",
					"when": "false"
				},
				{
					"command": "gradle.openSettings",
					"when": "false"
				},
				{
					"command": "gradle.cancellingTreeItemTask",
					"when": "false"
				},
				{
					"command": "gradle.pinTask",
					"when": "false"
				},
				{
					"command": "gradle.pinTaskWithArgs",
					"when": "false"
				},
				{
					"command": "gradle.removeRecentTask",
					"when": "false"
				},
				{
					"command": "gradle.dependency.reveal",
					"when": "false"
				},
				{
					"command": "gradle.showStoppedDaemons",
					"when": "false"
				},
				{
					"command": "gradle.hideStoppedDaemons",
					"when": "false"
				},
				{
					"command": "gradle.unpinTask",
					"when": "false"
				},
				{
					"command": "gradle.refresh",
					"when": "gradle:extensionActivated"
				},
				{
					"command": "gradle.runBuild",
					"when": "gradle:extensionActivated"
				},
				{
					"command": "gradle.findTask",
					"when": "gradle:extensionActivated"
				},
				{
					"command": "gradle.createProject",
					"when": "!java:projectManagerActivated"
				},
				{
					"command": "gradle.runTasks",
					"when": "false"
				},
				{
					"command": "gradle.java.projectConfiguration.update",
					"when": "false"
				}
			],
			"editor/context": [
				{
					"command": "gradle.showTasks",
					"group": "gradle@0",
					"when": "resourceFilename =~ /^((?!settings).)*\\.gradle(\\.kts)?$/"
				}
			],
			"explorer/context": [
				{
					"group": "1_javaactions@200",
					"submenu": "explorer/gradle",
					"when": "resourceFilename =~ /^.*\\.gradle(\\.kts)?$/"
				}
			],
			"explorer/gradle": [
				{
					"command": "gradle.showTasks",
					"group": "gradle@10",
					"when": "resourceFilename =~ /^((?!settings).)*\\.gradle(\\.kts)?$/"
				}
			],
			"javaProject.gradle": [
				{
					"command": "gradle.runTasks",
					"group": "gradle@20"
				},
				{
					"command": "gradle.openBuildFile",
					"group": "gradle@30"
				}
			],
			"view/item/context": [
				{
					"command": "gradle.runTask",
					"group": "contextGroup1@0",
					"when": "view =~ /^gradleTasksView$|^recentTasksView$|^gradleDefaultProjectsView$/ && viewItem =~ /^(pinned)?debugTask.*$|^(pinned)?task.*$/"
				},
				{
					"command": "gradle.runTaskWithArgs",
					"group": "contextGroup1@1",
					"when": "view =~ /^gradleTasksView$|^recentTasksView$|^gradleDefaultProjectsView$/ && viewItem =~ /^(pinned)?debugTask(WithTerminals)?$|^(pinned)?task(WithTerminals)?$/"
				},
				{
					"command": "gradle.debugTask",
					"group": "contextGroup2@0",
					"when": "view =~ /^gradleTasksView$|^recentTasksView$/ && viewItem =~ /^(pinned)?debugTask.*$/"
				},
				{
					"command": "gradle.debugTaskWithArgs",
					"group": "contextGroup2@1",
					"when": "view =~ /^gradleTasksView$|^recentTasksView$/ && viewItem =~ /^(pinned)?debugTask(WithTerminals)?$/"
				},
				{
					"command": "gradle.showTaskTerminal",
					"group": "inline@0",
					"when": "view == recentTasksView && viewItem =~ /^(pinned)?debugTask(WithArgs)?WithTerminals.*$|^(pinned)?task(WithArgs)?WithTerminals.*$|^(pinned)?runningTask(WithArgs)?WithTerminals.*$|^(pinned)?runningDebugTask(WithArgs)?WithTerminals.*$/"
				},
				{
					"command": "gradle.closeTaskTerminals",
					"group": "inline@1",
					"when": "view == recentTasksView  && viewItem =~ /^(pinned)?debugTask(WithArgs)?WithTerminals.*$|^(pinned)?task(WithArgs)?WithTerminals.*$|^(pinned)?runningTask(WithArgs)?WithTerminals.*$|^(pinned)?runningDebugTask(WithArgs)?WithTerminals.*$/"
				},
				{
					"command": "gradle.debugTask",
					"group": "inline@2",
					"when": "view =~ /^gradleTasksView$|^recentTasksView$/ && viewItem =~ /^(pinned)?debugTask.*$/ || viewItem =~ /^(pinned)?runningDebugTask.*$/ && allowParallelRun == true"
				},
				{
					"command": "gradle.runTask",
					"group": "inline@3",
					"when": "view =~ /^gradleTasksView$|^recentTasksView$|^gradleDefaultProjectsView$/ && viewItem =~ /^(pinned)?debugTask.*$|^(pinned)?task.*$/ || viewItem =~ /^(pinned)?runningTask.*$|^(pinned)?runningDebugTask.*$/ && allowParallelRun == true"
				},
				{
					"command": "gradle.restartTask",
					"group": "inline@4",
					"when": "view =~ /^gradleTasksView$|^recentTasksView$/ && viewItem =~ /^(pinned)?runningTask.*$|^(pinned)?runningDebugTask.*$/ && !allowParallelRun"
				},
				{
					"command": "gradle.cancelTreeItemTask",
					"group": "inline@5",
					"when": "view =~ /^gradleTasksView$|^recentTasksView$/ && viewItem =~ /^(pinned)?runningTask.*$|^(pinned)?runningDebugTask.*$/ && !allowParallelRun"
				},
				{
					"command": "gradle.cancellingTreeItemTask",
					"group": "inline@6",
					"when": "view =~ /^gradleTasksView$|^recentTasksView$/ && viewItem =~ /^cancellingTask.*$/"
				},
				{
					"command": "gradle.pinTask",
					"group": "contextGroup3@0",
					"when": "view =~ /^gradleTasksView$|^recentTasksView$/ && viewItem =~ /^debugTask(WithTerminals)?.*$|^task(WithTerminals)?.*$/"
				},
				{
					"command": "gradle.pinTaskWithArgs",
					"group": "contextGroup3@1",
					"when": "view =~ /^gradleTasksView$|^recentTasksView$/ && viewItem =~ /^(pinned)?debugTask(WithTerminals)?$|^(pinned)?task(WithTerminals)?$/"
				},
				{
					"command": "gradle.unpinTask",
					"group": "contextGroup3@2",
					"when": "view == gradleTasksView && viewItem =~ /^pinned.*$/"
				},
				{
					"command": "gradle.unpinAllTasks",
					"group": "contextGroup3@3",
					"when": "view == gradleTasksView && viewItem == PinnedTasks"
				},
				{
					"command": "gradle.removeRecentTask",
					"group": "contextGroup4@0",
					"when": "view == recentTasksView && viewItem =~ /^debugTask.*$|^task.*$/"
				},
				{
					"command": "gradle.stopDaemon",
					"group": "inline@0",
					"when": "view == gradleDaemonsView && viewItem =~ /^busy$|^idle$/"
				},
				{
					"command": "gradle.dependency.reveal",
					"group": "inline@0",
					"when": "view == gradleTasksView && viewItem == omitted"
				},
				{
					"command": "gradle.stopDaemon",
					"group": "contextGroup1@0",
					"when": "view == gradleDaemonsView && viewItem =~ /^busy$|^idle$/"
				},
				{
					"command": "gradle.openBuildFile",
					"group": "contextGroup5@0",
					"when": "view =~ /^gradleTasksView$$|^recentTasksView$/ && viewItem =~ /^(pinned)?debugTask.*$|^(pinned)?task.*$/"
				}
			],
			"view/title": [
				{
					"command": "gradle.unpinAllTasks",
					"group": "overflow_0@0",
					"when": "view == gradleTasksView"
				},
				{
					"command": "gradle.openSettings",
					"when": "view == gradleTasksView || view == gradleDefaultProjectsView"
				},
				{
					"command": "gradle.findTask",
					"when": "view == gradleTasksView"
				},
				{
					"command": "gradle.runBuild",
					"group": "navigation@0",
					"when": "view == gradleTasksView || view == gradleDefaultProjectsView"
				},
				{
					"command": "gradle.explorerFlat",
					"group": "navigation@1",
					"when": "view == gradleTasksView && !gradle:gradleTasksCollapsed"
				},
				{
					"command": "gradle.explorerTree",
					"group": "navigation@2",
					"when": "view == gradleTasksView && gradle:gradleTasksCollapsed"
				},
				{
					"command": "gradle.refresh",
					"group": "overflow@3",
					"when": "view == gradleTasksView || view == gradleDefaultProjectsView"
				},
				{
					"command": "gradle.java.projectConfiguration.update",
					"group": "navigation@3",
					"when": "view == gradleTasksView && javaLSReady"
				},
				{
					"command": "gradle.stopDaemons",
					"group": "navigation@1",
					"when": "view == gradleDaemonsView"
				},
				{
					"command": "gradle.refreshDaemonStatus",
					"group": "navigation@2",
					"when": "view == gradleDaemonsView"
				},
				{
					"command": "gradle.showStoppedDaemons",
					"group": "overflow_0@0",
					"when": "view == gradleDaemonsView && config.gradle.showStoppedDaemons == false"
				},
				{
					"command": "gradle.hideStoppedDaemons",
					"group": "overflow_0@0",
					"when": "view == gradleDaemonsView && config.gradle.showStoppedDaemons == true"
				},
				{
					"command": "gradle.clearAllRecentTasks",
					"group": "navigation@0",
					"when": "view == recentTasksView"
				},
				{
					"command": "gradle.closeAllTaskTerminals",
					"group": "navigation@1",
					"when": "view == recentTasksView"
				}
			]
		},
		"problemMatchers": [
			{
				"fileLocation": [
					"relative",
					"${workspaceFolder}"
				],
				"name": "gradle",
				"owner": "gradle",
				"pattern": {
					"message": 2,
					"regexp": "^.*(FAILURE):\\s*(.*)$",
					"severity": 1
				}
			}
		],
		"submenus": [
			{
				"id": "explorer/gradle",
				"label": "Gradle"
			}
		],
		"taskDefinitions": [
			{
				"properties": {
					"args": {
						"description": "Task args",
						"type": "string"
					},
					"buildFile": {
						"description": "The full path to task project build file",
						"type": "string"
					},
					"description": {
						"description": "Description of the task",
						"type": "string"
					},
					"group": {
						"description": "Task group",
						"type": "string"
					},
					"id": {
						"description": "Unique identifier for this task",
						"type": "string"
					},
					"javaDebug": {
						"description": "Debug JavaExec task when executing",
						"type": "boolean"
					},
					"project": {
						"description": "The project this task belongs to",
						"type": "string"
					},
					"projectFolder": {
						"description": "The gradle project folder path",
						"type": "string"
					},
					"rootProject": {
						"description": "The root project this task belongs to",
						"type": "string"
					},
					"script": {
						"description": "The task script name",
						"type": "string"
					},
					"workspaceFolder": {
						"description": "The workspace folder path",
						"type": "string"
					}
				},
				"required": [
					"id",
					"script",
					"description",
					"group",
					"project",
					"buildFile",
					"rootProject",
					"projectFolder",
					"workspaceFolder",
					"args",
					"javaDebug"
				],
				"type": "gradle"
			}
		],
		"views": {
			"gradleContainerView": [
				{
					"id": "gradleTasksView",
					"name": "Gradle Projects",
					"when": "gradle:activated && !gradle:defaultView"
				},
				{
					"id": "gradleDefaultProjectsView",
					"name": "Gradle Projects",
					"when": "gradle:activated && gradle:defaultView"
				},
				{
					"id": "recentTasksView",
					"name": "Recent Tasks",
					"visibility": "collapsed",
					"when": "gradle:activated"
				},
				{
					"id": "gradleDaemonsView",
					"name": "Gradle Daemons",
					"visibility": "collapsed",
					"when": "gradle:activated"
				}
			]
		},
		"viewsContainers": {
			"activitybar": [
				{
					"icon": "resources/icon-transparency.png",
					"id": "gradleContainerView",
					"title": "Gradle"
				}
			]
		}
	},
	"dependencies": {
		"await-lock": "^2.2.2",
		"fs-extra": "^11.1.0",
		"get-port": "^5.1.1",
		"jdk-utils": "^0.4.4",
		"lodash": "^4.17.21",
		"minimatch": "^5.1.1",
		"string-argv": "^0.3.1",
		"tree-kill": "^1.2.2"
	},
	"description": "Manage Gradle Projects, run Gradle tasks and provide better Gradle file authoring experience in VS Code",
	"devDependencies": {
		"@grpc/grpc-js": "^1.8.22",
		"@types/fs-extra": "^11.0.1",
		"@types/glob": "^8.1.0",
		"@types/google-protobuf": "^3.15.6",
		"@types/lodash": "^4.14.191",
		"@types/node": "^16.11.7",
		"@types/sinon": "^10.0.13",
		"google-protobuf": "^3.21.2",
		"grpc-tools": "^1.12.4",
		"sinon": "^15.0.1",
		"ts-loader": "^9.4.2",
		"ts-protoc-gen": "^0.15.0"
	},
	"displayName": "Gradle for Java",
	"icon": "resources/icon.png",
	"main": "./dist/index.js",
	"name": "vscode-gradle",
	"readme": "README.md",
	"scripts": {
		"compile": "tsc -p . && webpack --config webpack.config.js --mode production",
		"compile:test": "tsc -p .",
		"preinstall:ext": "vsce package",
		"update-tpn": "node scripts/update-third-party-notice.js"
	}
}
